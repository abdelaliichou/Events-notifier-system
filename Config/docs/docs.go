// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/alerts": {
            "get": {
                "description": "Retrieve a list of all alerts",
                "tags": [
                    "alerts"
                ],
                "summary": "Get all alerts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Alert"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "description": "This endpoint creates a new alert",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Create a new alert",
                "parameters": [
                    {
                        "description": "Alert Data",
                        "name": "alert",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Alert"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Alert"
                        }
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "500": {
                        "description": "Error creating alert"
                    }
                }
            }
        },
        "/alerts/{id}": {
            "get": {
                "description": "Retrieve a specific alert using its unique ID",
                "tags": [
                    "alerts"
                ],
                "summary": "Get an alert by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Alert UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Alert"
                        }
                    },
                    "404": {
                        "description": "Alert not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/resources": {
            "get": {
                "description": "Retrieve all resources from the service layer",
                "tags": [
                    "resources"
                ],
                "summary": "Get all resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Resource"
                            }
                        }
                    },
                    "500": {
                        "description": "Error fetching resources"
                    }
                }
            },
            "post": {
                "description": "This endpoint creates a new resource based on the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resources"
                ],
                "summary": "Create a new resource",
                "parameters": [
                    {
                        "description": "Resource Data",
                        "name": "resource",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Resource"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Resource"
                        }
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "500": {
                        "description": "Error creating resource"
                    }
                }
            }
        },
        "/resources/{id}": {
            "get": {
                "description": "Retrieve a resource using its unique ID",
                "tags": [
                    "resources"
                ],
                "summary": "Get a resource by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Resource"
                        }
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "put": {
                "description": "This endpoint updates an existing resource with the provided details.",
                "tags": [
                    "resources"
                ],
                "summary": "Update an existing resource by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Resource Data",
                        "name": "resource",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Resource"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resource updated successfully"
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Error updating resource"
                    }
                }
            },
            "delete": {
                "description": "This endpoint deletes a resource using its unique ID",
                "tags": [
                    "resources"
                ],
                "summary": "Delete a resource by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting resource"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Alert": {
            "type": "object",
            "properties": {
                "all": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "resourceID": {
                    "description": "Always present, but can be null",
                    "type": "string"
                }
            }
        },
        "models.Resource": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ucaID": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/alerts & /resources",
	Schemes:          []string{},
	Title:            "Alerts & Resources API",
	Description:      "API for managing alerts and resources",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
